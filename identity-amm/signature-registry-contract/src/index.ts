// Re-export types and functions generated by the Compact compiler
// Adjust the path './generated/registry' if the compiler output differs.

// export * from './generated/registry.js'; // REMOVED - This was incorrect

// You can also add custom helper functions or constants related to the contract here if needed.

// export * from './generated/registry'; // Example export 

// Import the generated CommonJS module
import generated = require('./generated/contract/index.cjs');

// Export only the Contract class value
export const Contract = generated.Contract;

// Consumers will need to instantiate it with their specific types.
// We no longer export ledger directly, consumers can get it from the Contract instance if needed.

// Export other potentially useful generated items if they exist
// export const witnesses = generated.witnesses; // Check if 'witnesses' is exported by index.cjs
// export const pureCircuits = generated.pureCircuits;
// export const contractReferenceLocations = generated.contractReferenceLocations;

// Re-export any types needed by consumers. Since index.cjs might not export types directly
// in a way TS understands easily across modules, consumers might need to rely on declaration
// files (.d.ts) generated during the build, or define interfaces based on the runtime objects.
// We might need to generate a .d.ts file for index.cjs if compactc doesn't. 