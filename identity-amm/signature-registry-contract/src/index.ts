// Re-export types and functions generated by the Compact compiler
// Adjust the path './generated/registry' if the compiler output differs.

// export * from './generated/registry.js'; // REMOVED - This was incorrect

// You can also add custom helper functions or constants related to the contract here if needed.

// export * from './generated/registry'; // Example export 

// Import the generated CommonJS module
// Adjust path based on actual compactc output structure
import generated = require('./generated/contract/index.cjs');
import { type WitnessContext } from '@midnight-ntwrk/compact-runtime';
import { type Contract as ContractType, type Witnesses as GenericWitnesses } from './generated/contract/index.d.cjs'; // Assuming types are in .d.cts

// Export the generated Contract class directly
export const Contract = generated.Contract;

// Export the generated ledger function if it exists (needed by API)
// Check ./generated/contract/index.cjs to confirm export name
export const ledger = generated.ledger; 

// Define the Private State type (empty for this contract)
export type SignatureRegistryPrivateState = Record<string, never>;

// Define the Witnesses type matching the contract
export interface SignatureRegistryWitnesses extends GenericWitnesses<SignatureRegistryPrivateState> {
    own_wallet_public_key(context: WitnessContext<any, SignatureRegistryPrivateState>): [SignatureRegistryPrivateState, bigint]; // Returns Field (bigint)
}

// Define the actual witness implementations (placeholders for now)
// The API using this contract needs to provide the real implementations.
export const witnesses: SignatureRegistryWitnesses = {
    own_wallet_public_key: ({ privateState }) => {
        // Placeholder implementation - returns 0n
        // A real implementation would derive/fetch the actual wallet key
        console.warn("[CONTRACT WITNESS] Using placeholder own_wallet_public_key witness returning 0n");
        return [privateState, 0n];
    },
};

// Type alias for consumers using the specific contract
export type SignatureRegistryContract =
    ContractType<SignatureRegistryPrivateState, SignatureRegistryWitnesses>;

// Re-export other useful generated items if needed and available
// export const pureCircuits = generated.pureCircuits;
// export const contractReferenceLocations = generated.contractReferenceLocations;

// Re-export any types needed by consumers. Since index.cjs might not export types directly
// in a way TS understands easily across modules, consumers might need to rely on declaration
// files (.d.ts) generated during the build, or define interfaces based on the runtime objects.
// We might need to generate a .d.ts file for index.cjs if compactc doesn't. 