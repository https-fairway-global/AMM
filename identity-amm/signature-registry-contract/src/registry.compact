pragma language_version >= 0.14.0;
import CompactStandardLibrary;

// ------------------------------
// Ledger State for Signature Registry
// ------------------------------

// Store the registered signing public key for a given wallet public key
// Using Field for wallet public key for simplicity, consider a better representation
export ledger registered_signing_keys: Map<Field, CurvePoint>; // Wallet Address (Field) -> Signing Key (CurvePoint)

// ------------------------------
// Witness Functions
// ------------------------------

// Witness to provide the caller's wallet public key (e.g., derived from their zSwap key)
// Implementation is external (TS/JS runtime)
// NOTE: In a real system, deriving this securely might be complex.
// For now, assume a simple witness provides it directly.
witness own_wallet_public_key(): Field;

// ------------------------------
// Signature Registration Logic
// ------------------------------

// Public circuit to register a signing key for the calling user's wallet key
export circuit register(signing_key: CurvePoint): [] {
    // 1. Get the caller's wallet public key (as Field) via witness
    const wallet_address = disclose(own_wallet_public_key());

    // 2. Disclose the provided signing key to make it public
    const public_signing_key = disclose(signing_key);

    // 3. Store the mapping in the public ledger
    registered_signing_keys.insert(wallet_address, public_signing_key);

    // Note: No return value needed, success is implied if no assert fails.
}

// Public view function to get the registered signing key for a given wallet address
export circuit get_signing_key(wallet_address: Field): CurvePoint {
    // Lookup returns the value directly
    return registered_signing_keys.lookup(wallet_address);
} 